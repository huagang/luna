/**
 * 微景展事件初始化界面
 * 数据加载顺序
 * 1:进入界面先加载列表信息，渲染列表，同时初始各种点击事件
 * 2:默认点击第一个界面,得到第一个界面里面的元素；遍历每个元素，遍历中赋值到 currentComponent,将currentComponent复制到全局变量lunapage中，激活angular的初始设置，渲染画布中对应的组件，然后画布中的数据到currentComponent中，也就是全局变量的lunapage中，然后再更新controller中的数据
 * 3:切换page的时候，先保存当前页面的数据，然后再触发点击事件重复2中的过程
 */

var imghost = "http://cdn.visualbusiness.cn/public/vb";

var lunaPage = {},
    currentPageId = "",
    currentComponentId = "",
    currentComponent = {},
    currentPage = null;

var objdata = {
    businessId: Util.location().business_id || 0,
    articleListData: null,
    articleData: null,
    canvas: {
        width: 375, //画布的宽
        height: 617 //画布的高
    }
};

var $overlay = $("#pop-overlay"); //模态层，有效缓存变量

/** 
 * 初始化头部点击事件
 */
var InitTopArea = function () {

    //初始化插件生成事件
    var initComponentClickEvent = function () {
        document.querySelector(".component-btn-wrap").addEventListener('click', function (e) {
            e.preventDefault();

            //div添加事件
            var divBtnDom = $(e.target.closest('.component-btn'))[0];

            var tagId = divBtnDom.id,
                componentType = divBtnDom.dataset.comtype;

            if (componentType.length > 0) {
                createNewEelement(componentType, 'create');
            }
        });
    };

    return {
        init: function () {
            initComponentClickEvent();
        }
    };
} ();
/** 
 * 初始化左边的代码
 */
var InitLeftArea = function () {

    //左侧列表拖拽效果
    var initDragEvent = function () {
        //拖拽变换页面的顺序
        $('#list-page').droppable({
            activeClass: 'active',
            hoverClass: 'hover',
            accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable
            drop: function (e, ui) {
                var $el = $('<li class="drop-item">' + ui.draggable.html() + '</li>');
                $(this).append($el);
            },
        }).sortable({
            items: '.drop-item:not(.welcome)',
            sort: function () {
                $(this).removeClass("active");
                console.log('sort');
            },
            delay: 500,
            stop: function () {
                reOrderPage();
            }
        });
    };

    //初始化页面创建、修改点击事件
    var initEditEvent = function () {
        //新增界面
        $("#new-built").click(function () {
            $overlay.css("display", "block");
            var $pop_window = $("#pop-add");
            var h = $pop_window.height();
            var w = $pop_window.width();
            var $height = $(window).height();
            var $width = $(window).width();
            $pop_window.css({
                "display": "block",
                "top": ($height - h) / 2,
                "left": ($width - w) / 2
            });
            resetDialog();
            $("[name=pageType][value=1]").trigger('click');
            $('#txt-name,#txt-short').removeAttr('readonly', 'readonly');
        });

        //修改界面
        $("#list-page").on('click', 'a.modify', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var pageItemDom = $(e.target).closest('li'),
                pageCode = pageItemDom.data('pagecode');
            if (pageCode == 'welcome' || pageCode == 'index') {
                if (pageCode == 'welcome') {
                    $('#txt-time').closest('.item-wrap').removeClass('hide');
                } else {
                    $('#txt-time').closest('.item-wrap').addClass('hide');
                }
                $('#txt-name,#txt-short').attr('readonly', 'readonly');
            } else {
                $('#txt-name,#txt-short').removeAttr('readonly', 'readonly');
            }
            modify(e);
        });
        //页面复用
        $("#list-page").on('click', 'a.pageCopy', function (e) {
            e.preventDefault();
            e.stopPropagation();
            modify(e, 'copy');
        });

        //创建或更新，根据弹窗是否存在modify_page_id确定
        $("#setup").click(function (e) {
            var modifyPageId = $("#modify_page_id").val();
            var sourcePageId = $('#sourcePageId').val();
            if (modifyPageId) {
                modifyPageName();
            } else if (sourcePageId) {
                lunaPage.savePage(currentPageId);
                creatPageID();
            } else {
                creatPageID();
            }
        });

        $('[name=pageType]').on('change', function (e) {
            if ($(this).val() == 1) {
                $('#txtPageHeight').attr('readonly', 'readonly');
                document.querySelector('#txtPageHeight').value = '';
            } else if ($('#sourcePageId').val()) {
                $('#txtPageHeight').attr('readonly', 'readonly');
            } else {
                $('#txtPageHeight').removeAttr('readonly');
            }
        });

        //取消
        $("button.btn-clc").click(function (e) {
            $overlay.css("display", "none");
            $("div.pop").css("display", "none");
        });

        $("#btn-delete").click(function (e) {
            e.preventDefault();
            e.stopPropagation();
            deletePage($(this).attr("pageID"));
        });
    };
    /** 
     * 初始化选中功能
     */
    var initPageSelectEvent = function () {
        // 左侧点击页面
        $("#list-page").on("click", ".drop-item", function () {

            $(this).siblings(".drop-item").removeClass("current");
            $(this).addClass("current");

            lunaPage.getPageData($(this).attr("page_id"));


        });
    };

    return {
        init: function () {
            initDragEvent();
            initEditEvent();
            initPageSelectEvent();
        }
    };
} ();

/** 
 * 初始化右边的代码
 */
var InitRightArea = function () {

    /** 
     * 初始化颜色选择
     */
    var initColorSet = function () {
        $('.color-set').each(function () {
            $(this).minicolors({
                control: $(this).attr('data-control') || 'hue',
                defaultValue: $(this).attr('data-defaultValue') || '',
                inline: $(this).attr('data-inline') === 'true',
                format: $(this).attr('data-format') || 'hex',
                letterCase: $(this).attr('data-letterCase') || 'lowercase',
                opacity: $(this).attr('data-opacity'),
                position: $(this).attr('data-position') || 'bottom left',
                change: function (value, opacity) {
                    if (!value) return;
                    if (opacity) value += ', ' + opacity;
                    if (typeof console === 'object') {
                        console.log(value);
                    }
                },
                theme: 'bootstrap'
            });

        });
    };

    /**
    *初始化收起功能 
    */
    var initSlide = function () {

        $('.btn-slide').on('click', function (e) {
            $(this).closest('.slide-panel').find('.slide-content').toggle();
            $(this).toggleClass('icon-slideup');
            $(this).toggleClass('icon-slidedown');
        });
    };
    /** 
     * 初始化字体的功能
     */
    var initFontSet = function () {
        var $editor = $("#editor");
        //字体
        $('#font-select').on('click', 'li', function () {
            var fontFamily = $(this).text();
            $("div.selected-text").css("font-family", fontFamily);
            lunaPage.updatePageComponents();
        });
        //字体大小
        $('#size-select').on('click', 'li', function () {
            var fontSize = $(this).text();
            $("div.selected-text").css("font-size", fontSize);
            lunaPage.updatePageComponents();
        });
        //粗细
        $('#bold-select').click(function () {
            var $tarSelect = $("div.selected-text");
            var fontWeight = $tarSelect.css("font-weight");
            if (fontWeight == "bold") {
                $tarSelect.css("font-weight", "normal");
            } else {
                $tarSelect.css("font-weight", "bold");
            }
            lunaPage.updatePageComponents();
        });
        //斜体
        $('#italic-select').click(function () {
            var $tarSelect = $("div.selected-text");
            var fontStyle = $tarSelect.css("font-style");
            if (fontStyle == "italic") {
                $tarSelect.css("font-style", "normal");
            } else {
                $tarSelect.css("font-style", "italic");
            }
            lunaPage.updatePageComponents();
        });
        //颜色
        $('#color-select').change(function () {
            // $("div.selected-text").css("color","'" + colorSet + "'");
            $("div.selected-text").css("color", this.value);

            lunaPage.updatePageComponents();
        });
        //左对齐
        $("#left-select").click(function () {
            $("div.selected-text").css("text-align", "left");
            lunaPage.updatePageComponents();
        });
        //居中
        $("#center-select").click(function () {
            $("div.selected-text").css("text-align", "center");
            lunaPage.updatePageComponents();
        });
        //右对齐
        $("#right-select").click(function () {
            $("div.selected-text").css("text-align", "right");
            lunaPage.updatePageComponents();
        });
        //行高
        $('#lineheight-select').on('click', 'li', function () {
            var lineHeight = $(this).text();
            $(".selected-text").css("line-height", lineHeight);
            lunaPage.updatePageComponents();
        });
    };

    var initPositionSet = function () {
        var $editor = $("#editor");

        //按up键上移1px
        $(document).bind('keydown', 'up', function (e) {
            var $target = $("div.componentbox-selected");
            var target_exist = $target.length;
            var y = $('#elementy').val();
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('top') == '0px') {
                    console.log('已经到顶部');
                    return false;
                }
                var position = $target.position();
                position.top = position.top - 1;
                $target.css("top", position.top + 'px');
                y = parseInt(y) - 1;
                $('#elementy').val(y);

                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
        //按down键下移1px
        $(document).bind('keydown', 'down', function (e) {
            var $target = $("div.componentbox-selected");
            var y = $('#elementy').val();
            var target_exist = $target.length;
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('bottom') == '0px') {
                    console.log('已经到底部');
                    return false;
                }
                var position = $target.position();
                position.top = position.top + 1;
                $target.css("top", position.top + 'px');
                y = parseInt(y) + 1;
                $('#elementy').val(y);

                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
        //按left键左移1px
        $(document).bind('keydown', 'left', function (e) {
            if (e.target.nodeName == 'INPUT') {
                //如果是文本框，不操作空间位置，直接返回true
                return true;
            }
            var $target = $("div.componentbox-selected");
            var x = $('#elementx').val();
            var target_exist = $target.length;
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('left') == '0px') {
                    console.log('已经到左侧');
                    return false;
                }
                var position = $target.position();
                position.left = position.left - 1;
                $target.css("left", position.left + 'px');
                $('#elementx').val(parseInt(x) - 1);
                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
        //按right键右移1px
        $(document).bind('keydown', 'right', function (e) {
            if (e.target.nodeName == 'INPUT') {
                //如果是文本框，不操作空间位置，直接返回true
                return true;
            }

            var $target = $("div.componentbox-selected");
            var x = $('#elementx').val();
            var target_exist = $target.length;
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('right') == '0px') {
                    console.log('已经到右侧');
                    return false;
                }
                var position = $target.position();
                position.left = position.left + 1;
                $target.css("left", position.left + 'px');
                $('#elementx').val(parseInt(x) + 1);
                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
        //按shift+up键上移10px
        $(document).bind('keydown', 'shift+up', function (e) {
            var $target = $("div.componentbox-selected");
            var y = $('#elementy').val();
            var target_exist = $target.length;
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('top') == '0px') {
                    console.log('已经到顶部');
                    return false;
                }
                var position = $target.position();
                position.top = position.top - 10;
                $target.css("top", position.top + 'px');
                $('#elementy').val(parseInt(y) - 10);
                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
        //按shift+down键下移10px
        $(document).bind('keydown', 'shift+down', function (e) {
            var $target = $("div.componentbox-selected");
            var y = $('#elementy').val();
            var target_exist = $target.length;
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('bottom') == '0px') {
                    console.log('已经到底部');
                    return false;
                }
                var position = $target.position();
                position.top = position.top + 10;
                $target.css("top", position.top + 'px');
                $('#elementy').val(parseInt(y) + 10);
                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
        //按shift+left键左移10px
        $(document).bind('keydown', 'shift+left', function (e) {
            var $target = $("div.componentbox-selected");
            var x = $('#elementx').val();
            var target_exist = $target.length;
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('left') == '0px') {
                    console.log('已经到左侧');
                    return false;
                }
                var position = $target.position();
                position.left = position.left - 10;
                $target.css("left", position.left + 'px');
                $('#elementx').val(parseInt(x) - 10);
                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
        //按shift+right键右移10px
        $(document).bind('keydown', 'shift+right', function (e) {
            var $target = $("div.componentbox-selected");
            var x = $('#elementx').val();
            var target_exist = $target.length;
            var status = $editor.is(':focus');
            if ((!status) && target_exist) {
                if ($target.css('right') == '0px') {
                    console.log('已经到右侧');
                    return false;
                }
                var position = $target.position();
                position.left = position.left + 10;
                $target.css("left", position.left + 'px');
                $('#elementx').val(parseInt(x) + 10);
                lunaPage.updatePageComponents();
                componentPanel.update();
                return false;
            }
        });
    };

    /** 
     * 初始化富文本编辑器
     */
    var initEditor = function () {
        var $editor = $("#editor");

        var fonts = ['宋体', '黑体', '微软雅黑', 'Arial', 'Times New Roman', 'Verdana'],
            $fontTarget = $('#font-select');
        var font_size = ['12px', '13px', '14px', '16px', '18px', '20px', '24px', '28px', '32px', '36px', '40px', '48px', '64px', '72px'],
            $sizeTarget = $('#size-select');
        var line_height = ['12px', '13px', '14px', '16px', '18px', '20px', '24px', '28px', '32px', '36px', '40px', '48px', '64px', '72px'],
            $heightTarget = $('#lineheight-select');
        $.each(fonts, function (idx, fontName) {
            $fontTarget.append($('<li><a data-edit="fontName ' + fontName + '" style="font-family:\'' + fontName + '\'">' + fontName + '</a></li>'));
        });
        $.each(font_size, function (idx, fontSize) {
            $sizeTarget.append($('<li><a data-edit="fontSize ' + fontSize + '" style="font-size:\'' + fontSize + '\'">' + fontSize + '</a></li>'));
        });
        $.each(line_height, function (idx, lineHeight) {
            $heightTarget.append($('<li><a data-edit="lineHeight' + lineHeight + '" style="line-height:\'' + lineHeight + '\'">' + lineHeight + '</a></li>'));
        });

        //富文本编辑器输入
        $editor.on('keyup keydown', function (e) {
            var content = $editor.html();
            var len_input = $editor.text().length;
            if (len_input > 512) {
                if (e.keyCode != 8) {
                    return false;
                }
            }
        });

        //粘贴时去除样式
        $editor.on('paste', function () {
            setTimeout(function () {
                var content = $editor.html();
                var newContent = content.replace(/<[^>]+>/g, "");
                $editor.html(newContent);
                var len_input = $editor.text().length;
                if (len_input > 512) {
                    $editor.text($editor.text().substring(0, 512));
                    newContent = $editor.html();
                }
                $("div.selected-text").html(newContent);
                componentPanel.update();

            }, 1);
        });
        //编辑器点击事件
        $editor.on('click', function () {
            var $component = $("div.componentbox");
        });
    };

    return {
        init: function () {
            initColorSet();
            initSlide();
            initFontSet();
            initPositionSet();
            initEditor();
        }
    };
} ();

/** 
 * 初始化中间画布的代码
 */
var InitCenterArea = function () {

    //画布中的右键点击事件
    var initRightClickEvent = function () {
        //右键删除组件
        $("#layermain").contextmenu({
            target: '#context-menu',
            before: function (e, element, target) {
                e.preventDefault();

                return true;
            },
            onItem: function (context, e) {
                var domId = e.target.id;
                var copmpnentType = currentComponent.type;

                switch (domId) {
                    case 'copy':
                        if ($('#' + currentComponentId).length > 0) {
                            if (copmpnentType == "canvas") {
                                return;
                            }
                            createNewEelement(copmpnentType, 'copy');
                        }
                        break;
                    case 'delete':
                        if ($('#' + currentComponentId).length > 0) {
                            if (copmpnentType == "canvas") {
                                return;
                            }
                            $('#' + currentComponentId).remove();
                            lunaPage.delPageComponents(currentPageId, currentComponentId);
                        }
                        break;
                    default:
                        break;
                }

                $("#context-menu").css("display", "none");
            }
        });
    };

    // 初始化左键点击事件 
    var initLeftClickEvent = function () {
        $('#canvas').on('click', '*[component-type]', function (e) {
            var target = $(this);
            $("div.selected-text").removeClass("selected-text");
            $("div.componentbox-selected").removeClass("componentbox-selected");
            target.addClass("componentbox-selected");
            $(this).find(".con .text").addClass("selected-text");
            getEleFocus(target);
            currentComponentId = target.attr("component-id");
            currentComponent = lunaPage.pages[currentPageId].page_content[target.attr("component-id")];
            componentPanel.init();
            if (target.attr("component-type") == "text") {
                $("#editor").html(lunaPage.pages[currentPageId].page_content[currentComponentId].content);
            }
            e.stopPropagation();
        });
    };

    //绑定键盘事件
    var initKeyBoardEvent = function () {

        //按delete按钮删除组件
        $(document).bind('keydown', 'del', function (e) {
            if (e.target.nodeName == "INPUT" || lunaPage.pages[currentPageId].page_content[currentComponentId].type == 'canvas') {
                //如果是文本框，删除文本框中的内容，不删除画布中的插件
                return true;
            }
            var status = $('#editor').is(':focus');
            if (!status) {
                $("div.componentbox-selected").remove();
                lunaPage.delPageComponents(currentPageId, currentComponentId);
            }
        });
    };

    return {
        init: function () {
            initLeftClickEvent();
            initRightClickEvent();
            initKeyBoardEvent();
        }
    };
} ();


$(document).ready(function () {

    //清空文件上传的值，解决同一文件不能重复上传问题
    $('input[type=file]').on('click', function (e) {
        $(this).val('');
    });
    InitTopArea.init();
    InitRightArea.init();
    InitLeftArea.init();
    InitCenterArea.init();
    // do init at last
    lunaPage.init();
});

/**
 * 界面的初始化状态
 */
(function ($) {
    $.init = function () {
        getAppData(getAppId(), function (res) {
            if (res.code != "0") {
                //不等于零说明获取数据失败
                $.alert(res.msg);
                return;
            }
            lunaPage.pages = res.data;
        });
        this.showPageList(this.pages);

        var firstPage = jQuery(".list-page .drop-item:first");
        if (firstPage) {
            firstPage.trigger('click');
        }
    };

    $.showPageList = function (pageList) {
        //debugger;
        setPageListHtml(pageList);
    };

    $.savePageList = function (pageList) {
        //调用借口保存数据
        savePageData();
    };

    //获取数据并展示
    $.getPageData = function (pageID) {
        //debugger;
        if (!$.pages[pageID].page_content) {
            getPageDataDetail(pageID, function (res) {
                if (res.code != "0") {
                    //不等于零说明获取数据失败
                    alert(res.msg);
                    return;
                }
                var data = res.data;
                lunaPage.pages[data.page_id] = res.data;
            });
        }
        this.showPage(pageID);
    };

    $.creatPage = function (pageID) {
        creatPageHtml(pageID);
    };

    $.showPage = function (pageID) {
        if (currentPageId !== "" && currentPageId != pageID) {
            this.savePage(currentPageId);
        }
        currentPageId = pageID;
        setPageHtml(pageID);
        setTimeout(function () {
            jQuery('#canvas [component-type=canvas]').trigger('click');
        }, 5);
    };

    $.savePage = function (pageID, isPrompt) {
        //调用接口保存单个页面数据
        savePageData(pageID, isPrompt);
    };

    $.delPage = function (pageID) {
        delete lunaPage.pages[pageID];
        currentPageId = "";
        currentPage = {};
        reOrderPage();
    };

    //更新component model
    $.updatePageComponents = function () {
        updatePageComponents();
    };

    $.creatPageComponents = function (pageID, componentType, createType) {
        creatPageComponentsHtml(pageID, currentComponent, createType);
    };

    $.delPageComponents = function (pageID, componentID) {
        if (pageID && componentID) {
            delete lunaPage.pages[pageID].page_content[componentID];
            currentComponentId = "";
            currentComponent = {};
            jQuery('#canvas [component-type=canvas]').trigger('click');
        }
    };
})(lunaPage);

/**
 * 左侧调整顺序
 * @return {[type]} [description]
 */
function reOrderPage() {
    var pageElements = $(".list-page .drop-item[page_id]");
    var pageOrder = {};
    for (var i = 0; i < pageElements.length; i++) {
        var pageId = $(pageElements[i]).attr("page_id");
        if (pageId) {
            //含有pageId的才是真正的页面元素（其他是拖拉控件或辅助元素）
            lunaPage.pages[pageId].page_order = i + 1;
            pageOrder[pageId] = i + 1;
        }
    }
    updatePageOrder(pageOrder);
    return pageOrder;
}

/**
 * 左侧显示
 * @param {[type]} pageList [description]
 */

function setPageListHtml(pageList) {
    $("#list-page").empty();
    var orderedPages = [], page;
    for (var key in pageList) {
        page = pageList[key];
        orderedPages[page.page_order] = page.page_id;
    }
    for (var i in orderedPages) {
        if (orderedPages[i]) {
            page = pageList[orderedPages[i]];
            $("#list-page").append(createPageListItemHtml(page));
        }
    }
}

/**
 * 创建左侧缩略图
 * @param  {[type]} page [description]
 * @return {[type]}      [description]
 */
function createPageListItemHtml(page) {
    // console.log(page);
    var pageHtml = [];
    pageHtml.push('<li class="drop-item {1}" page_id="{0}" data-pagecode="{1}"><div class="mod">'.format(page.page_id, page.page_code));
    pageHtml.push('<img src="' + imghost + '/img/pagesample.jpg" alt="缩略图" page_id="' + page.page_id + '" page_code="' + page.page_code + '" page_order="' + page.page_order + '"/>');
    pageHtml.push('<div class="page_title">' + page.page_name + '</div>');
    pageHtml.push('<div class="fun-page">');
    if (page.page_code != 'welcome' && page.page_code != 'index') {
        pageHtml.push('<a href="#" class="modify" page_id="' + page.page_id + '" page_code="' + page.page_code + '" page_order="' + page.page_order + '">编辑<i class="icon icon-edit"></i></a>');
        pageHtml.push('<a href="#" class="delete" page_id="' + page.page_id + '" onclick="deletePageDialog(\'' + page.page_id + '\');">删除<i class="icon icon-delete"></i></a>');
    }
    pageHtml.push('</div></div></li>');
    return pageHtml.join("");

}

/**
 * 创建页面
 * @param  {[type]} pageID [description]
 * @return {[type]}        [description]
 */

function creatPageHtml(pageID) {

    var page = lunaPage.pages[pageID];
    var pageHtml = createPageListItemHtml(page);
    $("#list-page").append(pageHtml);
    currentPageId = pageID;
    //debugger;
    createCanvas();
}

/**
 * 创建画布
 * 创建页面画布
 * @return {[type]} [description]
 */
function createCanvas() {
    lunaPage.creatPageComponents(currentPageId, null, "canvas");
    currentComponent = jQuery.extend(true, {}, componentCanvasModelTemplate);
    currentComponent["_id"] = currentComponentId;
    currentComponent.timestamp = new Date().getTime();
    lunaPage.pages[currentPageId]["page_content"][currentComponentId] = currentComponent;
    componentPanel.init("canvas");
    lunaPage.editPageComponents(currentPageId, currentComponentId);
    componentPanel.update("canvas");
}

/**
 * 切换页面加载新页面内容
 * @param {[type]} pageID [description]
 */
function setPageHtml(pageID) {
    var $root = $('#layermain');
    $('#layermain').html("");
    $('#layermain').css({ "background-color": "#ffffff", 'height': lunaPage.pages[pageID].page_height || '617px' });
    // 解析json数据
    var jsonData = lunaPage.pages[pageID]["page_content"];

    if (!jsonData || Object.keys(jsonData).length == 0) {
        createCanvas();
    } else {
        // 组件数据解析，对应jsonData
        // console.log(pageID);
        var componentArr = [];
        $.each(jsonData, function (n, value) {
            // move canvas first
            if (!value.timestamp) {
                value.timestamp = new Date().getTime();
            }
            if (value.type == "canvas") {
                componentArr = [value].concat(componentArr);
            } else {
                componentArr.push(value);
            }
            // componentArr.push(value);
        });
        //对组件的显示顺序重新排序
        componentArr.sort(Util.arraySortBy('timestamp'));
        componentArr.forEach(function (element) {
            setPageComponentsHtml(pageID, element._id);
        });
    }
}

/**
 * 只管创建component，其他一切事务由调用者自行协调
 * 此函数只创建component UI
 */
function creatPageComponentsHtml(pageID, componentID, componentType) {
    if (currentPageId == "") {
        alert("请选择需要编辑的页面或者重新创建新页面！");
        return;
    }
    if (!componentType) {
        alert("componentType error");
        return;
    }
    var comType = componentType;
    var newComponent;
    var isNew = false;
    if (!componentID) {
        isNew = true;
        componentID = comType + new Date().getTime() + Math.floor(Math.random() * 10);
        newComponent = $('<div class="componentbox newcomponentbox componentbox-selected" data-toggle="context" ><div class="con context con_' + comType + '"></div></div>');
    } else {
        newComponent = $('<div class="componentbox newcomponentbox" data-toggle="context" ><div class="con context con_' + comType + '"></div></div>');
    }

    //全局使用，否则最好使用返回值
    currentComponentId = componentID;
    newComponent.attr("id", componentID);
    newComponent.attr("component-id", componentID);

    //组件位置
    var newPosition = 50 + 10 * $(".newcomponentbox").size();

    newComponent.css("top", newPosition + "px");
    newComponent.css("left", newPosition + "px");

    switch (comType) {
        case "canvas":
            //增加样式显示，增加绑定事件 click等
            newComponent.attr("component-type", "canvas");
            newComponent.children("div").append('<div class="canvas" style="width:100%;height:100%;"></div>');
            newComponent.css({ "top": "0px", "left": "0px", "width": "100%", "height": "100%" });
            newComponent.addClass("bg-canvas");
            break;
        case "img":
            newComponent.attr("component-type", "img");
            newComponent.children("div").append('<img src="' + imghost + '/img/sample.png"/>');
            break;
        case "text":
            newComponent.attr("component-type", "text");
            newComponent.children("div").append('<div class="text selected-text" style= "font-family:微软雅黑;font-size: 16px;text-align: left;line-height: 24px;color: #212121;font-style:normal;font-width:normal;">右侧面板编辑文本内容</div>');
            break;
        case "nav":
            newComponent.attr("component-type", "nav");
            newComponent.children("div").append('<img src="' + imghost + '/img/samplenav.png"/>');
            break;
        case "pano":
            newComponent.attr("component-type", "pano");
            newComponent.children("div").append('<img src="' + imghost + '/img/samplepano.png" />');
            break;
        case "audio":
            newComponent.attr("component-type", "audio");
            newComponent.children("div").append('<img src="' + imghost + '/img/sampleaudio.png" />');
            break;
        case "video":
            newComponent.attr("component-type", "video");
            newComponent.children("div").append('<img src="' + imghost + '/img/samplevideo.png" />');
            break;
        case "tab":
            newComponent.attr("component-type", "tab");
            newComponent.children("div").append('<div class="tabContainer">' + componentViewTemplate.tabMenu + '</div>');
            newComponent.css({ "top": "0px", "left": "0px", "width": "100%", "height": "100%" });
            newComponent.addClass("tabmenu");
            break;
        case "imgList":
            newComponent.attr("component-type", comType);
            newComponent.children("div").append('<div class="imgListContainer"><div></div></div>');
            newComponent.css({ "top": "0px", "left": "0px", "width": "100%", "height": "100%" });
            break;
        default:
            $.alert("未知的组件类型");
            return;
    }

    $("#layermain").append(newComponent);
    if (comType != "canvas") {
        initBind(componentID);
    }
    if (isNew) {
        getEleFocus($("#" + componentID));
    }
}

/**

 * 编辑时，初始化画布中的内容
 * @param {[type]} pageID      [description]
 * @param {[type]} componentID [description]
 * @param {[type]} comType     [description]
 */
function setPageComponentsHtml(pageID, componentID, comType) {
    var newComponent = $('<div class="componentbox"><div class="con"></div></div>');

    var componentObj = lunaPage.pages[pageID].page_content[componentID];
    if (!componentObj) {
        alert("component error");
        return;
    }
    comType = componentObj.type; // text,img,bg
    var content = componentObj.content, icon;
    newComponent.children(".con").addClass("con_" + comType);
    switch (comType) {
        case "canvas":
            //增加样式显示，增加绑定事件 click等
            newComponent.attr("component-type", "canvas");
            newComponent.children("div").append('<div class="canvas" style="width:100%;height:100%;"></div>');
            newComponent.addClass("bg-canvas");
            newComponent.css("background-color", componentObj.bgc);
            newComponent.css("background-image", 'url({0})'.format(componentObj.bgimg));
            // showPanoBackground(newComponent, componentObj);
            break;
        case "text":
            newComponent.attr("component-type", "text");
            newComponent.children("div").append('<div class="text">' + content + '</div>');
            break;
        case "img":
            newComponent.attr("component-type", "img");
            if (content == "") {
                content = imghost + "/img/sample.png";
            }
            newComponent.children("div").append('<img src="' + content + '"/>');
            break;
        case "nav":
            newComponent.attr("component-type", "nav");
            var icon = imghost + "/img/samplenav.png";
            if (content != undefined && content.hasOwnProperty("icon")) {
                icon = content.icon;
            }
            newComponent.children("div").append('<img src="' + icon + '"/>');
            break;
        case "pano":
            newComponent.attr("component-type", "pano");
            var icon = imghost + "/img/samplepano.png";
            if (content != undefined && content.hasOwnProperty("icon")) {
                icon = content.icon;
            }
            newComponent.children("div").append('<img src="' + icon + '"/>');
            break;
        case "audio":
            newComponent.attr("component-type", "audio");
            var icon = imghost + "/img/samplevideo.png";
            if (content != undefined && content.hasOwnProperty("icon")) {
                icon = content.icon;
            }
            newComponent.children("div").append('<img src="' + icon + '"/>');
            break;
        case "video":
            newComponent.attr("component-type", "video");
            var icon = imghost + "/img/samplevideo.png";
            if (content != undefined && content.hasOwnProperty("icon")) {
                icon = content.icon;
            }
            newComponent.children("div").append('<img src="' + icon + '"/>');
            break;
        case "tab":
            newComponent.attr("component-type", "tab");

            var $topMenu = $('<div class="tabContainer">' + componentViewTemplate.tabMenu + '</div>');
            $topMenu.find('.enuTab-bg img').attr('src', content.bannerImg);
            newComponent.children("div").append('<div class="tabContainer">' + componentViewTemplate.tabMenu + '</div>');
            newComponent.css({ "top": "0px", "left": "0px", "width": "100%", "height": "100%" });
            newComponent.addClass("tabmenu");

            var innerHtml = initMenuTab.getTabListHtmlInCavas(content.tabList);
            newComponent.find('.menulist').empty().append(innerHtml);

            break;
        default:
            $.alert("未知的组件类型");
            return;
    }


    if (!componentID) {
        componentID = componentObj._id;
    }
    newComponent.attr("component-id", componentID); // id
    newComponent.attr("id", componentID);
    newComponent.css("position", "absolute");
    switch (comType) {
        case "canvas":
            break;
        default:
            var unit = componentObj.unit;
            newComponent.css("left", componentObj.x + unit);
            newComponent.css("top", componentObj.y + unit);
            newComponent.css("width", componentObj.width + unit);
            newComponent.css("height", componentObj.height + unit);
            newComponent.css("right", componentObj.right + unit);
            newComponent.css("bottom", componentObj.bottom + unit);
            break;
    }

    newComponent.css("z-index", componentObj.zindex);
    newComponent.css("display", componentObj.display);
    newComponent.children("div").children().attr("style", componentObj.style_other);
    $("#layermain").append(newComponent);
    if (comType != "canvas") {
        initBind(componentID);
    } else {
        showPanoBackground(newComponent, componentObj);
    }

    lostFocus($("#" + componentID));
}

/**
 * 更新指定component model数据，不依赖于当前组件是谁，由指定的参数决定
 * @param  {[type]} pageID      [description]
 * @param  {[type]} componentID [description]
 * @return {[type]}             [description]
 */
function updatePageComponents(pageID, componentID) {
    var $currenthtml = $("#layermain #" + componentID);
    if (!$currenthtml) {
        alert("component error!");
        return;
    }

    function valueReplace(v) {
        if (v.indexOf("\\") != -1)
            v = v.toString().replace(
                new RegExp("([\\\\])", 'g'), "\\\\");

        if (v.indexOf("\"") != -1) {
            v = v.toString().replace(
                new RegExp('(["\"])', 'g'), "\\\"");
        }
        return v;
    }

    var componentObj = lunaPage.pages[pageID].page_content[componentID];
    //初始化数据，后续数据部分其实没有必要更新，画布中只能操作位置信息，其他都是通过控制面板操作的
    switch ($currenthtml.attr("component-type")) {
        case "canvas":
            break;
        case "text":
            var con_text = $currenthtml.find(".text");
            componentObj.content = con_text.prop('innerHTML');
            try {
                componentObj.content = valueReplace(componentObj.content);
            } catch (e) {
                console.log(e.message);
            }
            break;
        case "img":
            componentObj.content = $currenthtml.find("img").attr("src");
            break;
        case "nav":
            componentObj.content.icon = $currenthtml.find("img").attr("src");
            break;
        case "pano":
            componentObj.content.icon = $currenthtml.find("img").attr("src");
            break;
        case "audio":
            componentObj.content.icon = $currenthtml.find("img").attr("src");
            break;
        case "video":
            componentObj.content.icon = $currenthtml.find("img").attr("src");
            break;
        case "tab":
            // componentObj.content.icon = $currenthtml.find("img").attr("src");
            break;
        default:
            $.alert("未知的组件类型");
            return;

    }

    switch ($currenthtml.attr("component-type")) {
        case 'canvas':
            break;
        case 'tab':
            componentObj.x = parseInt($currenthtml.position().left);
            componentObj.y = parseInt($currenthtml.position().top);
            componentObj.width = parseInt($currenthtml.width());
            componentObj.height = parseInt($currenthtml.height());
            componentObj.right = parseInt($currenthtml.css('right').match(/[0-9]*/));
            componentObj.bottom = parseInt($currenthtml.css('bottom').match(/[0-9]*/));
            componentObj.unit = "px";
            break;
        default:
            componentObj.x = parseInt($currenthtml.position().left);
            componentObj.y = parseInt($currenthtml.position().top);
            componentObj.width = parseInt($currenthtml.find("div.con").width());
            componentObj.height = parseInt($currenthtml.find("div.con").height());
            componentObj.right = parseInt($currenthtml.css('right').match(/[0-9]*/));
            componentObj.bottom = parseInt($currenthtml.css('bottom').match(/[0-9]*/));
            componentObj.unit = "px";
            break;
    }

    componentObj.zindex = $currenthtml.zIndex();
    componentObj.display = $currenthtml.css('display');

    componentObj.style_other = $currenthtml.children("div").children().attr("style");
}

/**
 * 根据当前id更新组件htmlstyle
 * @param  {[type]} pageID      [description]
 * @param  {[type]} componentID [description]
 * @param  {[type]} comType     [description]
 * @return {[type]}             [description]
 */
function updatePageComponentsHtml(pageID, componentID, comType) {
    var comobj = $("#layermain #" + componentID);

    var component = lunaPage.pages[pageID].page_content[componentID];
    if (!component) {
        alert("component error");
        return;
    }
    var comType = component.type; // text,img,bg
    var content = component.content;

    switch (comType) {
        case "canvas":
            //comobj.children("div.con").html('<div class="canvas" style="width:100%;height:100%;"></div>');
            comobj.css("background-color", component.bgc);
            comobj.css("background-image", 'url({0})'.format(component.bgimg));
            showPanoBackground(comobj, component);
            break;
        case "text":
            comobj.children("div.con").html('<div class="text">' + content + '</div>');
            break;
        case "img":
            if (content == "") {
                content = imghost + "/img/sample.png";
            }
            comobj.children("div.con").html('<img src="' + content + '"/>');
            break;
        case "nav":
            if (content != undefined && content.hasOwnProperty("icon")) {
                var icon = content.icon;
                comobj.children("div.con").html('<img src="' + icon + '"/>');
            }
            break;
        case "pano":
            if (content != undefined && content.hasOwnProperty("icon")) {
                var icon = content.icon;
                comobj.children("div.con").html('<img src="' + icon + '"/>');
            }

            break;
        case "audio":
            if (content != undefined && content.hasOwnProperty("icon")) {
                var icon = content.icon;
                comobj.children("div.con").html('<img src="' + icon + '"/>');
            }

            break;
        case "video":
            if (content != undefined && content.hasOwnProperty("icon")) {
                var icon = content.icon;
                comobj.children("div.con").html('<img src="' + icon + '"/>');
            }

            break;
        case "tab":
            var innerHtml = initMenuTab.getTabListHtmlInCavas(content.tabList);
            comobj.find('.menulist').empty().append(innerHtml);

            comobj.find('.menuTab-bg img').attr('src', content.bannerImg);
            break;
        default:
            $.alert("未知的组件类型");
            return;
    }


    var idValue = component._id;
    var comType = component.type; // text，img
    var unit = component.unit;
    comobj.css("position", "absolute");
    // console.log(component.position.changeTrigger.horizontal);
    // console.log(component.position.changeTrigger.vertial);
    if (component.position.changeTrigger.horizontal == 'right') {
        comobj.css("left", 'auto');
        comobj.css("right", component.right + unit);
    } else {
        comobj.css("left", component.x + unit);
        comobj.css("right", 'auto');
    }
    if (component.position.changeTrigger.vertial == 'bottom') {
        comobj.css("top", 'auto');
        comobj.css("bottom", component.bottom + unit);
    } else {
        comobj.css("top", component.y + unit);
        comobj.css("bottom", 'auto');
    }
    comobj.css("width", component.width + unit);
    comobj.css("height", component.height + unit);

    comobj.css("z-index", component.zindex);
    comobj.css("display", component.display);
    comobj.children("div").children().attr("style", component.style_other);
}

/**
 * 显示全景背景
 * @param  {[type]} $container    [全景背景存放容器]
 * @param  {[type]} componentData [description]
 * @return {[type]}               [description]
 */
function showPanoBackground($container, componentData) {
    var pano = {},
        panoObj = $container.find('canvas');

    if (componentData.panoId && panoObj.length == 0) {
        pano = new com.vbpano.Panorama($container.get(0));
        pano.setPanoId(componentData.panoId); //panoId
        pano.setHeading(componentData.pano.heading); //左右
        pano.setPitch(componentData.pano.pitch); //俯仰角
        pano.setRoll(componentData.pano.roll); //未知
        pano.setAutoplayEnable(false); //自动播放
        pano.setGravityEnable(componentData.gravity); //重力感应

        //heading方向滚动的时候回调函数
        pano.panoView.onHeadingChangeCallback = function (heading) {
            heading = heading % 360;
            if (heading < 0) {
                heading += 360;
            }
            var scope = angular.element('#panoHead').scope(); //jquery+angular实现
            if (scope.canvas.pano.heading != Number(heading).toFixed(0) * 1) {
                scope.canvas.pano.heading = Number(heading).toFixed(0) * 1;
                scope.canvas.currentComponent.pano.heading = scope.canvas.pano.heading;
                scope.$apply();
                // $('#panoHead').trigger('blur');
            }
        };

        //pitch方向滚动的时候回调函数
        pano.panoView.onPitchChangeCallback = function (pitch) {
            var scope = angular.element('#panoPitch').scope(); //jquery+angular实现
            if (scope.canvas.pano.pitch != Number(pitch).toFixed(0) * 1) {
                scope.canvas.pano.pitch = Number(pitch).toFixed(0) * 1;
                scope.canvas.currentComponent.pano.pitch = scope.canvas.pano.pitch;
                scope.$apply();
                // $('#panoPitch').trigger('blur');
            }
        };
        currentBgPano = pano;
    } else if (componentData.panoId && panoObj.length > 0) {
        currentBgPano.setPanoId(componentData.panoId);
        currentBgPano.setHeading(componentData.pano.heading); //左右
        currentBgPano.setPitch(componentData.pano.pitch); //俯仰角
        currentBgPano.setRoll(componentData.pano.roll); //未知
        currentBgPano.setGravityEnable(componentData.gravity);
    } else {
        if (panoObj.length > 0) {
            panoObj.parent().parent().remove();
            currentBgPano = null;
        }
    }
}
//获取应用的id
function getAppId() {
    return window.location.pathname.match(/\d+/)[0];
}
/**
 * 画布中的点击事件
 * @type {Object}
 */
var componentPanel = {
    init: function (componentType) {
        if (componentType) {
            $("#init" + componentType.capitalizeFirstLetter()).trigger('click');
        }
        currentController = componentType + "Div";
        var controllerManagerDiv = $("#controller-manager");
        var children = controllerManagerDiv.children();
        for (var i = 0; i < children.length; i++) {
            if ($(children[i]).attr("id") == currentController) {
                $(children[i]).show();
            } else {
                $(children[i]).hide();
            }
        }
    },
    update: function (componentType) {
        $("#update" + componentType.capitalizeFirstLetter()).trigger('click');
    }
};


/**
 * 点击画布中的组件，渲染右边参数，在画布点击事件中调用
 * @type {Object}
 */
var componentPanel = {
    init: function (componentType) {
        if (componentType) {
            $("#init" + componentType.capitalizeFirstLetter()).trigger('click');
        }
        currentController = componentType + "Div";
        var controllerManagerDiv = $("#controller-manager");
        var children = controllerManagerDiv.children();
        for (var i = 0; i < children.length; i++) {
            if ($(children[i]).attr("id") == currentController) {
                $(children[i]).show();
            } else {
                $(children[i]).hide();
            }
        }
    },
    update: function (componentType) {
        $("#update" + componentType.capitalizeFirstLetter()).trigger('click');
    }
};

var initMenuTab = {
    getTabListHtmlInCavas: function (tabList) {
        var innerHtml = [];
        for (var i = 0; i < tabList.length; i++) {

            var defaultBgColor = 'background-color:' + (tabList[i].icon.bgColor ? tabList[i].icon.bgColor.defaultColor : '#fff') + ';',
                defaultIconColor = 'color:' + (tabList[i].icon.iconColor ? tabList[i].icon.iconColor.defaultColor : '#ff4800') + ';';
            switch (tabList[i].icon.type) {
                case 'customer':
                    innerHtml.push('<li class="menuitem " item="default" ><div class="menuitem-img"><i class="customerIcon icon-list" style="background:url(' + (tabList[i].icon.customer.defaultUrl || tabList[i].icon.customer.currentUrl) + ') no-repeat;"></i></div><div class="menuitem-title"><span>' + tabList[i].name + '</span></div></li>');
                    break;
                case 'default':
                    innerHtml.push('<li class="menuitem " item="default" ><div class="menuitem-img"><div class="menuitem-img-bg" style=' + defaultBgColor + '><i class="iconfont icon-list icon-' + tabList[i].icon.code + '" style="' + defaultIconColor + '"></i></div></div><div class="menuitem-title"><span>' + tabList[i].name + '</span></div></li>');
                    break;
                case 'text':
                    innerHtml.push('<li class="menuitem " item="default" ><div class="menuitem-img"><div class="menuitem-img-bg" style=' + defaultBgColor + '><i class="icontext" style="' + defaultIconColor + '">' + tabList[i].name + '</i></div></div><div class="menuitem-title"><span></span></div></li>');
                    break;
            }
        }
        return innerHtml.join('');
    }
};
